// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getUnpublishedEvents = `-- name: GetUnpublishedEvents :many
SELECT id, event_type, aggregate_type, aggregate_id, payload, created_at, published_at, published FROM outbox
WHERE published IS FALSE
ORDER BY created_at
LIMIT 100
`

func (q *Queries) GetUnpublishedEvents(ctx context.Context) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, getUnpublishedEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.AggregateType,
			&i.AggregateID,
			&i.Payload,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO outbox(id, event_type, aggregate_type, aggregate_id, payload)
VALUES($1, $2, $3, $4, $5)
RETURNING id, event_type, aggregate_type, aggregate_id, payload, created_at, published_at, published
`

type InsertEventParams struct {
	ID            uuid.UUID
	EventType     string
	AggregateType string
	AggregateID   string
	Payload       []byte
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (Outbox, error) {
	row := q.db.QueryRow(ctx, insertEvent,
		arg.ID,
		arg.EventType,
		arg.AggregateType,
		arg.AggregateID,
		arg.Payload,
	)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.AggregateType,
		&i.AggregateID,
		&i.Payload,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.Published,
	)
	return i, err
}

const setEventAsPublished = `-- name: SetEventAsPublished :exec
UPDATE outbox
SET published = TRUE, published_at = NOW()
WHERE id = $1
`

func (q *Queries) SetEventAsPublished(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, setEventAsPublished, id)
	return err
}
